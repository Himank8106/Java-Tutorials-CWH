package JavaCWH;

@FunctionalInterface
interface myFunctionalInterface{
    void thisMethod();
    // void thisMethod2();  --> Can't have more than one abstract method in a functional interface.
}

class NewPhone extends A{   // 'A' class is in Lec48_MethodOverriding.java
    @Override
    public void meth1(){
        System.out.println("I am meth1 of class NewPhone.");
    }
    @Deprecated
    public int sum(int a, int b){
        return a+b;
    }
}

public class Lec108_AnnotationsInJava {
    @SuppressWarnings("deprecation")
    public static void main(String[] args) {
        NewPhone obj = new NewPhone();
        obj.meth1();
        obj.sum(5, 6);   
    }
}


/* Functional Interface - An interface with only one abstract method is called Functional Interface. It can have any number of default, static methods but can contain only one abstract method. It can also declare methods of object class. */

/* @SuppressWarnings - This annotation tells the compiler to ignore the warning messages that can be generated by using the deprecated code.
 */

/*
Annotations are used to provide supplement information about a program.
Annotations start with @ symbol.
Annotations do not change action of a compiled program.
Annotations help to associate metadata (information) to the program elements i.e. instance variables, constructors, methods, classes, etc.
*/
